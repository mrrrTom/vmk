- Is this allowed in C. Describe semantics or why it is not permitted:

a)
int i;
i = (1 || 2) % (1 | 2);
printf ("i = %d\n", i);

allowed - 1 % 3 

b)
int a, b, m, n, z;
m = n = 5;
z = a = b = 0;
z--, (a = b) = z + (m != n);
printf("%d %d %d %d %d\n", a, b, m, n, z);

not allowed. with help of priority table we can define, that there will be such
instruction:
(a = b) = int value

but (a=b) is rvalue, so we cannot assign something to it

c) ...
	int i = 1;
	i = i << i | i;
	printf( "i = %d\n", i);

allowed we will get:
	1) i << i  -> 2
	2) 2 | i   -> 3
	3) i = 3
	4) print 3

d)
...
double x = 1.9;
int a;
doule b = 3.7;
a = b += (1 && 2 || 3) != (int)x;
printf("%f %d %f\n", x, a, b);

allowed:
1) (1 && 2 || 3) -> 1
2) (int)x -> 1
3) 1 != 1 -> 0
4) a = b -> a = 3.7
5) 3.7 != 0
6) 1.9, 3 - (int), 3.7

e)
...
	int x;
	x = 5;
	++x = 10;
	printf("%d %d\n", x, y);

	not allowed

	++x - it is rvalue, it can`t be in the left part of assignment

f)...
	int i, x, y;
	x = 5;
	y = 10;
	i = 15;
	x = (y = 0, i = 1);
	printf("%d %d %d\n", i, x, y);
	(x = y == 0), i =1;
	printf("%d %d %d\n", i, x, y);

	1) x = 1 y = 0 i = 1
	2) print -> 1 1 0
	3) x = 1, i = 1
	4) print -> 1 1 0
	allowed
g) ...
	int x, y;
	x = 5;
	y = x && ++x;
	printf("%d %d\n", x, y);

	allowed
	1) x = 5
	2) y = 1
	3) print -> 6, 1

h) ...
int x = 2, y, z; // not allowed - assignment of undeclared variables
x *= 3 + 2

i) ...
	int x = 2, y = 1, z = 0;
	y = x && y || z;
	x = x || !y && z;
	z = x / ++x;
	printf(" %d %d %d\n", x, y, z);

1) y = 1
2) x = 1
3) z = 1, x = 2
4) print -> 2 1 1

j) ...
	int x = 03, y = 02, z = 01;
	printf("%d\n", x | y & -z);
	printf("%d\n", x ^ y & -z);
	printf("%d\n", x & y && z);
	prinrf("%d\n", x << 3);

allowed;
1) x = 3, y = 2, z = 1
2) print -> 3
3) print -> 1
4) print -> 1
5) print -> 48

k) ...
	int x,y,z;
	z = y = z = 1;
	z += y += z;
	printf("%d\n", x < y ? y++ : x++);
	printf("%d\n", z += z < y ? ++x : y--);
	printf("%d %d %d\n", x, y, z);
	printf("%d\n", z >= y && y >= z);
	1) y = 2
	2) z = 3
	3) print -> 2, y = 3
	4) print 6, z = 6, y = 2
	5) print 1, 2, 6
	6) print 0

	allowed

l) ...
	int x, y, z, i;
	x = y = z = 1;
	i = ++x || ++y && ++z;
	printf("%d%d%d%d\n", x, y, z, i);
	i = x++ <= --y || ++z >= i;
	printf("%d%d%d%d\n", x, y, z, i);
allowed
1) x= 2, y = 1 z = 1 - because of lazy ex
	i = 1
2) print -> 2, 1, 1, 1
3)  i =1 z = 2   y = 0 x = 3
4) print -> 3, 0, 2, 1
